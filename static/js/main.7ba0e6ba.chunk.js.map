{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","EditorState","createEmpty","editorState","setEditorState","Font","register","fonts","fontWeight","styles","StyleSheet","create","page","flexDirection","section","flexGrow","margin","value","convertToRaw","getCurrentContent","blocks","map","block","text","trim","join","MyDocument","size","style","fontSize","className","href","id","type","onClick","ReactDOM","render","document","fileName","blob","url","loading","error","getElementById","onChange","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"+UA8EeA,MAxEf,WAEA,MAAsCC,IAAMC,UACxC,kBAAMC,cAAYC,iBADtB,mBAAOC,EAAP,KAAoBC,EAApB,KAIAC,IAAKC,SAAS,CACZC,MAAM,CACJ,CAACC,WAAY,aAGjB,IAAMC,EAASC,IAAWC,OAAO,CAC/BC,KAAM,CACJC,cAAe,OAEjBC,QAAS,CACPC,SAAU,EACVC,OAAQ,MAINC,EADSC,uBAAaf,EAAYgB,qBAAqBC,OACxCC,KAAI,SAAAC,GAAK,OAAMA,EAAMC,KAAKC,OAAmBF,EAAMC,KAAf,QAAqBE,KAAK,MAG7EC,EAAY,kBAChB,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,KAAK,KAAKC,MAAOnB,EAAOG,KAA9B,SACE,cAAC,IAAD,CAAMgB,MAAOnB,EAAOK,QAApB,SACE,cAAC,IAAD,CAAMc,MAAO,CAACC,SAAS,IAAvB,SAA6BZ,WAiBrC,OACE,mCACA,mCAEM,qBAAKa,UAAU,SAAf,yBAIJ,sBAAKA,UAAU,aAAf,yBACc,mBAAGC,KAAK,6BAAR,4BAGd,qBAAKD,UAAU,cAAcE,GAAG,SAAhC,SAEA,uBAAOC,KAAK,SAAShB,MAAM,eAAeiB,QA1B9C,WACAC,IAASC,OACT,cAAC,IAAD,CAAiBC,SAAW,cAACX,EAAD,IAAeY,SAAS,aAApD,SAEK,cAAGC,KAAH,EAASC,IAAT,IAAcC,EAAd,EAAcA,QAAd,EAAuBC,MAAvB,OAAoCD,EAAU,sBAAwB,mBAGtDJ,SAASM,eAAe,gBAsB3C,qBAAKb,UAAU,YAAf,SACQ,cAAC,SAAD,CAAQ3B,YAAaA,EAAayC,SAAUxC,EAAgByC,YAAa,6BAEjF,qBAAKf,UAAU,OAAf,sKC3DagB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCCdZ,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASM,eAAe,SAK/CG,M","file":"static/js/main.7ba0e6ba.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport {Editor, EditorState, convertToRaw} from 'draft-js';\nimport { PDFDownloadLink, Document, Page, Text, View, StyleSheet} from \"@react-pdf/renderer\";\nimport { Font } from '@react-pdf/renderer';\nfunction App() {\n\nconst [editorState, setEditorState] = React.useState(\n    () => EditorState.createEmpty(),\n  );\n\nFont.register({\n  fonts:[\n    {fontWeight: 'normal'}\n  ]\n})\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: \"row\"\n  },\n  section: {\n    flexGrow: 1,\n    margin: 30\n  }\n});\nconst blocks = convertToRaw(editorState.getCurrentContent()).blocks;\nconst value = blocks.map(block => (!block.text.trim() && '\\n') || block.text).join('\\n');\n\n\nconst MyDocument =() => (\n  <Document>\n    <Page size=\"A4\" style={styles.page}>\n      <View style={styles.section}>\n        <Text style={{fontSize:14}}>{value}</Text>\n      </View>\n    </Page>\n  </Document>);\n\nfunction run(){\nReactDOM.render(\n<PDFDownloadLink document= {<MyDocument/>} fileName=\"output.pdf\">\n{\n     ({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Download now!')\n\n }\n </ PDFDownloadLink>,document.getElementById('linked')\n);\n}\n\n\nreturn (\n  <>\n  <center>\n\n        <div className=\"editor\">\n        Text-to-PDF\n        </div>\n\n    <div className=\"editorleft\">\n      Developer : <a href=\"https://mr-ravin.github.io\">Ravin Kumar</a>\n    </div>\n\n    <div className=\"editorright\" id=\"linked\">\n\n    <input type=\"button\" value=\"Generate PDF\" onClick={run} />\n\n    </div>\n  <div className=\"editlayer\">\n          <Editor editorState={editorState} onChange={setEditorState} placeholder= \"Type Something here...\" />\n  </div>\n  <div className=\"note\">\n  Note: This computer program is built using ReactJS and is provided as an an opensource program. The developer do not provide any kind of warranty.\n  </div>\n  </center>\n  </>\n);\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals';\nimport 'draft-js/dist/Draft.css';\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}